'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.readConfig = readConfig;
exports.readConfigs = readConfigs;
Object.defineProperty(exports, 'normalize', {
  enumerable: true,
  get: function () {
    return _normalize.default;
  }
});
Object.defineProperty(exports, 'getTestEnvironment', {
  enumerable: true,
  get: function () {
    return _utils.getTestEnvironment;
  }
});
Object.defineProperty(exports, 'isJSONString', {
  enumerable: true,
  get: function () {
    return _utils.isJSONString;
  }
});
Object.defineProperty(exports, 'replaceRootDirInPath', {
  enumerable: true,
  get: function () {
    return _utils.replaceRootDirInPath;
  }
});
Object.defineProperty(exports, 'deprecationEntries', {
  enumerable: true,
  get: function () {
    return _Deprecated.default;
  }
});
Object.defineProperty(exports, 'defaults', {
  enumerable: true,
  get: function () {
    return _Defaults.default;
  }
});
Object.defineProperty(exports, 'descriptions', {
  enumerable: true,
  get: function () {
    return _Descriptions.default;
  }
});
exports.constants = void 0;

function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  };

  return data;
}

function fs() {
  const data = _interopRequireWildcard(require('graceful-fs'));

  fs = function () {
    return data;
  };

  return data;
}

function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function () {
    return data;
  };

  return data;
}

var constants = _interopRequireWildcard(require('./constants'));

exports.constants = constants;

var _normalize = _interopRequireDefault(require('./normalize'));

var _readConfigFileAndSetRootDir = _interopRequireDefault(
  require('./readConfigFileAndSetRootDir')
);

var _resolveConfigPath = _interopRequireDefault(require('./resolveConfigPath'));

var _utils = require('./utils');

var _Deprecated = _interopRequireDefault(require('./Deprecated'));

var _Defaults = _interopRequireDefault(require('./Defaults'));

var _Descriptions = _interopRequireDefault(require('./Descriptions'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function () {
    return cache;
  };
  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
async function readConfig(
  argv,
  packageRootOrConfig, // Whether it needs to look into `--config` arg passed to CLI.
  // It only used to read initial config. If the initial config contains
  // `project` property, we don't want to read `--config` value and rather
  // read individual configs for every project.
  skipArgvConfigOption,
  parentConfigPath,
  projectIndex = Infinity
) {
  let rawOptions;
  let configPath = null;

  if (typeof packageRootOrConfig !== 'string') {
    if (parentConfigPath) {
      const parentConfigDirname = path().dirname(parentConfigPath);
      rawOptions = packageRootOrConfig;
      rawOptions.rootDir = rawOptions.rootDir
        ? (0, _utils.replaceRootDirInPath)(
            parentConfigDirname,
            rawOptions.rootDir
          )
        : parentConfigDirname;
    } else {
      throw new Error(
        'Jest: Cannot use configuration as an object without a file path.'
      );
    }
  } else if ((0, _utils.isJSONString)(argv.config)) {
    // A JSON string was passed to `--config` argument and we can parse it
    // and use as is.
    let config;

    try {
      config = JSON.parse(argv.config);
    } catch {
      throw new Error(
        'There was an error while parsing the `--config` argument as a JSON string.'
      );
    } // NOTE: we might need to resolve this dir to an absolute path in the future

    config.rootDir = config.rootDir || packageRootOrConfig;
    rawOptions = config; // A string passed to `--config`, which is either a direct path to the config
    // or a path to directory containing `package.json`, `jest.config.js` or `jest.config.ts`
  } else if (!skipArgvConfigOption && typeof argv.config == 'string') {
    configPath = (0, _resolveConfigPath.default)(argv.config, process.cwd());
    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);
  } else {
    // Otherwise just try to find config in the current rootDir.
    configPath = (0, _resolveConfigPath.default)(
      packageRootOrConfig,
      process.cwd()
    );
    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);
  }

  if (typeof rawOptions === 'function') {
    rawOptions = await rawOptions();
  }

  const {options, hasDeprecationWarnings} = (0, _normalize.default)(
    rawOptions,
    argv,
    configPath,
    projectIndex
  );
  const {globalConfig, projectConfig} = groupOptions(options);
  return {
    configPath,
    globalConfig,
    hasDeprecationWarnings,
    projectConfig
  };
}

const groupOp